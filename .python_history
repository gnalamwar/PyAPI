a = [ 1,2,3,4]
id(a)
x = a
id(x)
y = set(x) 
id(y)
x
y
r[1]
y[1]
print(y[1])
type(y)
x= ["grapes","apples","oranges"]
y= ["grape juice", "apple juice", "orange juice"]
x[-1]
x[2]
x[-2]
x[-3]
x[-4]
x.append(
x.append(y)
x
x[3][1]
import os
os.system('clear')
exit
iplist = ['10.0.0.1', '10.0.1.1', '10.3.2.1']
 iplist2 = ['5060', '80', '22']
iplist2 = ['5060', '80', '22']
iplist2
iplist1
iplist
iplist[2]
iplist[1]
iplist[-1]
iplist2[-1]
iplist.append(iplist2)
iplist
iplist[3][2]
iplist[3][1]
iplist[3][0]
iplist[1][0]
iplist[1][1]
alta3classes = ['python_basics', 'python_api_design', 'python_for_networking', 'kubernetes', \
      'sip', 'ims', '5g', '4g', 'avaya', 'ansible', 'python_and_ansible_for_network_automation']
print(alta3classes)
print(len(alta3classes))
print(len(alta3classes[0])
print(alta3classes[0])
print(alta3classes[4])
print(alta3classes[9])
print(alta3classes[0:3])
print(alta3classes[2:5])
print(alta3classes[2:])
print(alta3classes[:5])
print(alta3classes[2:])
print(alta3classes[:])
print(alta3classes)
print(alta3classes[:-2])
print(alta3classes[-2:])
print(alta3classes[:])
print(alta3classes[::])
print(alta3classes[::-1])
print(alta3classes[1::-1])
print(alta3classes[3::-1])
print(alta3classes[-3::-1])
ostipdict = {'host01':'10.0.2.3', 'host02':'192.168.3.3', 'host03':'72.4.23.22'}
hostipdict = {'host01':'10.0.2.3', 'host02':'192.168.3.3', 'host03':'72.4.23.22'}
hostipdict
hostipdict['host04'] = '10.23.43.224'
hostipdict
hostipdict['host02'] = '192.168.70.55'
hostipdict
hostipdict['host02']
firewalldict = {'sip':'5060', 'ssh':'22', 'http':'80'}
print(firewalldict)
 firewalldict['https'] = 443
firewalldict['https'] = 443
firewalldict
print("The port in use for HTTP Secure is:", firewalldict['https'])
print("This is port is use for HTTP Secure:", firewalldict['https']]
print("This is port is use for HTTP Secure:", firewalldict['https'])
firewalldict.get('razzledazzlerootbeer'))
firewalldict.get('razzledazzlerootbeer')
print(firewalldict.get('razzledazzlerootbeer'))
print(firewalldict.keys())
print(firewalldict.values())
del firewalldict["sip"]
print(firewalldict)
print(len(firewalldict))
vendordict = {'cisco': True, 'juniper': False, 'arista': True, 'netgear': True}
vendordict 
    custlist = ['acme', 'globex corporation', 'soylent green', 'initech', 'umbrella corporation']
custlist = ['acme', 'globex corporation', 'soylent green', 'initech', 'umbrella corporation']
custlist
print(dir{dict))
print(dir(dict))
print(vendorlist)
print(vendordict.keys())
print(vendordict.values())
print(vendorlist.get('juniper')
print(vendorlist.get('juniper'))
vendordict = {'cisco': True, 'juniper': False, 'arista': True, 'netgear': True}
    custlist = ['acme', 'globex corporation', 'soylent green', 'initech', 'umbrella corporation']
custlist = ['acme', 'globex corporation', 'soylent green', 'initech', 'umbrella corporation']
vendordict = {'cisco': True, 'juniper': False, 'arista': True, 'netgear': True}
vendorlist.get('juniper')
vendorlis
vendorlist
custlist = ['acme', 'globex corporation', 'soylent green', 'initech', 'umbrell│·····································································································
custlist = ['acme', 'globex corporation', 'soylent green', 'initech', 'umbrella']
vendordict = {'cisco': True, 'juniper': False, 'arista': True, 'netgear': True}
vendordict
vendordict.get('juniper')
vendordict
vendordict.pop('juniper')
vendordict
del vendorlist('arista')
del vendorlist['arista']
vendordict
print(vendordict.get('netgear'))
print(dir(list))
custlist.append('cyberdyne')
custlist
endordict = {'cisco': True, 'juniper': False, 'arista': True, 'netgear': True}
    custlist = ['acme', 'globex corporation', 'soylent green', 'initech', 'umbrella corporation']
custlist = ['acme', 'globex corporation', 'soylent green', 'initech', 'umbrella corporation']
vendordict = {'cisco': True, 'juniper': False, 'arista': True, 'netgear': True}
vendorlist
vendordict
print(dir(dict))
custlist.keys()
vendordict.get('juniper')
custlist.keys()
custlist.get('umbrella corporation')
 custlist.update('nsx')
custlist.update('nsx')
vendordict.update({'cisco': False})
vendordict.sort()
vendordict = {'cisco': True, 'juniper': False, 'arista': True, 'netgear': True}
custlist = ['acme', 'globex corporation', 'soylent green', 'initech', 'umbrella corporation']
dir(dict)
vendordict.update('cisco': False)
vendordict.update({'cisco': False})
vendordict
custlist.sort()
custlist
vendordict.keys()
vendordict.values(()
vendordict.values(())
vendordict.values()
vendordict.copy() 	
vendordict.items()
challenges = ["science", "turbe", ["googles", "eyes"], "nothing"]
challenges
challenges[2]
challenges[2][1]
challenges[2][0]
trial= ["science", "turbo", {"eyes": "goggles", "goggles": "eyes"}, "nothing"]
print(trial[2]["eyes"])
print(trial[2])
print(trial[2][2])
import json
hitchhikers = [{"name": "Zaphod Beeblebrox", "species": "Betelgeusian"},
      {"name": "Arthur Dent", "species": "Human"}]
hitchhikers
with open("galancyguide.json","w") as zfile: 
with open("galacyguide.json", "w") as zfile:
with open("galaxyguide.json", "w") as zfile:
  json.dump(hitchhikers, zfile)
hitchhikers = [{"name": "Zaphod Beeblebrox", "species": "Betelgeusian"},
      {"name": "Arthur Dent", "species": "Human"}]
print(hitchhikers)
import json
jsonstring = json.dumps(hitchhikers)
print(jsonstring)
mport json
import json
with open("datacenter.json", "r") as datacenter:
        datacenterstring = datacenter.read()
print(datacenterstring)
with open("datacenter.json", "r") as datacenter:
  datacenterstring = datacenter.read()
print(datacenterstring)
datacenterdecoded = json.loads(datacenterstring)
print(datacenterdecoded)
print(type(datacenterdecoded))
print(datacenterdecoded["row3"})
print(datacenterdecoded["row3"])
print(datacenterdecoded["row3"][1])
import json
with open("challenge.json", "r") as clg:
  clgstring = clg.read()
clgstring
type(clgstring)
type(clg)
clgstringdecode = json.dumps(clgstring)
type(clgstringdecode)
print(clgstringdecode[3],["name"]
print(clgstringdecode[3],["name"])
with open("challenge.json", "r") as clg:
with open("datacenter.json", "r") as datacenter:
        datacenterstring = datacenter.read()
datacenterdecoded = json.loads(datacenterstring)
print(type(datacenterdecoded))
print(datacenterdecoded)
exit()
